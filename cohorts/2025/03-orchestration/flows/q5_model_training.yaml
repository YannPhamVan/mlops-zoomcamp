id: q5_model_training
namespace: mlops.zoomcamp

tasks:
  - id: extract
    type: io.kestra.plugin.core.http.Download
    uri: https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2023-03.parquet

  - id: prepare_data
    type: io.kestra.plugin.scripts.python.Script
    containerImage: python:3.11-slim
    inputFiles:
      data.parquet: "{{ outputs.extract.uri }}"
    outputFiles:
      - filtered.parquet
    script: |
      import subprocess
      subprocess.run(["pip", "install", "pandas", "pyarrow"], check=True)

      import pandas as pd
      df = pd.read_parquet("data.parquet")
      df['duration'] = df.tpep_dropoff_datetime - df.tpep_pickup_datetime
      df.duration = df.duration.dt.total_seconds() / 60
      df = df[(df.duration >= 1) & (df.duration <= 60)].copy()
      categorical = ["PULocationID", "DOLocationID"]
      df[categorical] = df[categorical].fillna(-1).astype('int').astype('str')
      df[categorical + ["duration"]].to_parquet("filtered.parquet", index=False)

  - id: train_model
    type: io.kestra.plugin.scripts.python.Script
    containerImage: python:3.11-slim
    inputFiles:
      filtered.parquet: "{{ outputs.prepare_data.outputFiles['filtered.parquet'] }}"
    outputFiles:
      - model.pkl
      - dv.pkl
    script: |
      import subprocess
      subprocess.run(["pip", "install", "scikit-learn", "pandas", "pyarrow"], check=True)

      import pandas as pd
      import pickle
      from sklearn.feature_extraction import DictVectorizer
      from sklearn.linear_model import LinearRegression

      df = pd.read_parquet("filtered.parquet")

      dv = DictVectorizer()
      categorical = ["PULocationID", "DOLocationID"]
      train_dicts = df[categorical].to_dict(orient='records')
      X_train = dv.fit_transform(train_dicts)
      y_train = df["duration"].values

      lr = LinearRegression()
      lr.fit(X_train, y_train)

      print("Intercept:", lr.intercept_)

      with open("model.pkl", "wb") as f_out:
        pickle.dump(lr, f_out)

      with open("dv.pkl", "wb") as f_out:
        pickle.dump(dv, f_out)
